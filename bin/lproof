#!/usr/bin/env ruby

$:.unshift File.expand_path('../../lib', __FILE__)
require 'liability-proof'
require 'optparse'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: #{$0} COMMAND [OPTIONS]"
  opt.separator ""
  opt.separator "Commands"
  opt.separator "    generate    (g):  generate json of root node and partial trees"
  opt.separator "    verify      (v):  verify specified partial tree is valid (matches root node)"
  opt.separator "    prettyprint (pp): pretty print generated json"
  opt.separator ""
  opt.separator "Options"

  opt.on("-f", "--file source.json", "Specify source file. For generate command, it should contain accounts data; for verify command, it should contain the partial tree; for prettyprint command it specify the json to print.") do |f|
    options[:file] = f
  end

  opt.on("-r", "--root root.json", "Specify root node data file. For generate command it's the destination to write data; for verify command it's the source to read data.") do |f|
    options[:root] = f
  end

  options[:partial_trees_dir] = 'partial_trees'
  opt.on("--partial-trees-dir DIR", "Specify the directory to store generated partial tree json files, default to 'partial_trees'.") do |d|
    options[:partial_trees_dir] = d
  end

  options[:use_float] = false
  opt.on("-F", "--use-float", "Print numbers as Float number instead of String in json files. This option is only provided to generating data in compatible format with some verification tools, don't use it unless neccessary. Default to false.") do |f|
    options[:use_float] = true
  end

  options[:float_nonce] = false
  opt.on("--float-nonce", "Use float number as nonce. This option is only provided for compatibility with some verification tools. Default to false.") do |f|
    options[:float_nonce] = true
  end

  opt.on("-b", "--blp-format", "Generate json in blind-liability-proof format. Default to false.") do |f|
    options[:use_float]   = true
    options[:float_nonce] = true
  end
end

opt_parser.parse!

case ARGV[0]
when 'generate', 'g'
  LiabilityProof::Generator.new(options).write!
when 'verify', 'v'
  LiabilityProof::Verifier.new(options).verify!
when 'prettyprint', 'pp'
  LiabilityProof::PrettyPrinter.new(options).print
else
  puts opt_parser
end
